<?php
declare(strict_types=1);
namespace Vocab;

abstract class AbstractDefinitionsIterator implements \Iterator, \SeekableIterator {

   protected \ArrayIterator $iter;

   function __construct(array $targets)
   { 
      $this->iter = new \ArrayIterator($arr);
   }

   abstract protected function get_current(array $target) : DefinitionInterface | false;

   function current() : DefinitionInterface | false
   {
      $current = $this->iter->current(); 

      return ($current === false) ? $current : $this->get_current($current);
   }

   public function seek(int $i)
   {
      $this->iter->seek($i);  
   }

   function next() : void
   {
      $this->iter->next();
   }

   function valid() : bool
   {
      return $this->iter->valid();
   }

   function key() : int | null
   {
      return $this->iter->key();
   }

   function rewind() : void
   {
      $this->iter->rewind();
   }
}
